# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.model_ import Model
from swagger_server.models.values import Values  # noqa: F401,E501
from swagger_server import util


class InlineResponse2001Timeseries(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, timestamp: datetime=None, epoch: str=None, source_file: str=None, source_url: str=None, source_line: float=None, values: List[Values]=None):  # noqa: E501
        """InlineResponse2001Timeseries - a model defined in Swagger

        :param timestamp: The timestamp of this InlineResponse2001Timeseries.  # noqa: E501
        :type timestamp: datetime
        :param epoch: The epoch of this InlineResponse2001Timeseries.  # noqa: E501
        :type epoch: str
        :param source_file: The source_file of this InlineResponse2001Timeseries.  # noqa: E501
        :type source_file: str
        :param source_url: The source_url of this InlineResponse2001Timeseries.  # noqa: E501
        :type source_url: str
        :param source_line: The source_line of this InlineResponse2001Timeseries.  # noqa: E501
        :type source_line: float
        :param values: The values of this InlineResponse2001Timeseries.  # noqa: E501
        :type values: List[Values]
        """
        self.swagger_types = {
            'timestamp': datetime,
            'epoch': str,
            'source_file': str,
            'source_url': str,
            'source_line': float,
            'values': List[Values]
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'epoch': 'epoch',
            'source_file': 'sourceFile',
            'source_url': 'sourceUrl',
            'source_line': 'sourceLine',
            'values': 'values'
        }

        self._timestamp = timestamp
        self._epoch = epoch
        self._source_file = source_file
        self._source_url = source_url
        self._source_line = source_line
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2001Timeseries':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_1_timeseries of this InlineResponse2001Timeseries.  # noqa: E501
        :rtype: InlineResponse2001Timeseries
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this InlineResponse2001Timeseries.

        The timestamp of the measurement values.  # noqa: E501

        :return: The timestamp of this InlineResponse2001Timeseries.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this InlineResponse2001Timeseries.

        The timestamp of the measurement values.  # noqa: E501

        :param timestamp: The timestamp of this InlineResponse2001Timeseries.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def epoch(self) -> str:
        """Gets the epoch of this InlineResponse2001Timeseries.

        The source epoch from which the dataset is extracted.  # noqa: E501

        :return: The epoch of this InlineResponse2001Timeseries.
        :rtype: str
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch: str):
        """Sets the epoch of this InlineResponse2001Timeseries.

        The source epoch from which the dataset is extracted.  # noqa: E501

        :param epoch: The epoch of this InlineResponse2001Timeseries.
        :type epoch: str
        """
        allowed_values = ["recent", "historical", "now"]  # noqa: E501
        if epoch not in allowed_values:
            raise ValueError(
                "Invalid value for `epoch` ({0}), must be one of {1}"
                .format(epoch, allowed_values)
            )

        self._epoch = epoch

    @property
    def source_file(self) -> str:
        """Gets the source_file of this InlineResponse2001Timeseries.

        Name and optionally path of the file within the zip archive.  # noqa: E501

        :return: The source_file of this InlineResponse2001Timeseries.
        :rtype: str
        """
        return self._source_file

    @source_file.setter
    def source_file(self, source_file: str):
        """Sets the source_file of this InlineResponse2001Timeseries.

        Name and optionally path of the file within the zip archive.  # noqa: E501

        :param source_file: The source_file of this InlineResponse2001Timeseries.
        :type source_file: str
        """
        if source_file is None:
            raise ValueError("Invalid value for `source_file`, must not be `None`")  # noqa: E501

        self._source_file = source_file

    @property
    def source_url(self) -> str:
        """Gets the source_url of this InlineResponse2001Timeseries.

        URL to the archive file on the FTP service.  # noqa: E501

        :return: The source_url of this InlineResponse2001Timeseries.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url: str):
        """Sets the source_url of this InlineResponse2001Timeseries.

        URL to the archive file on the FTP service.  # noqa: E501

        :param source_url: The source_url of this InlineResponse2001Timeseries.
        :type source_url: str
        """
        if source_url is None:
            raise ValueError("Invalid value for `source_url`, must not be `None`")  # noqa: E501

        self._source_url = source_url

    @property
    def source_line(self) -> float:
        """Gets the source_line of this InlineResponse2001Timeseries.

        Line number in the file within the zip archive where this timestamp is extracted.  # noqa: E501

        :return: The source_line of this InlineResponse2001Timeseries.
        :rtype: float
        """
        return self._source_line

    @source_line.setter
    def source_line(self, source_line: float):
        """Sets the source_line of this InlineResponse2001Timeseries.

        Line number in the file within the zip archive where this timestamp is extracted.  # noqa: E501

        :param source_line: The source_line of this InlineResponse2001Timeseries.
        :type source_line: float
        """
        if source_line is None:
            raise ValueError("Invalid value for `source_line`, must not be `None`")  # noqa: E501

        self._source_line = source_line

    @property
    def values(self) -> List[Values]:
        """Gets the values of this InlineResponse2001Timeseries.

        An array of objects with the parameter names and the measurement values.  # noqa: E501

        :return: The values of this InlineResponse2001Timeseries.
        :rtype: List[Values]
        """
        return self._values

    @values.setter
    def values(self, values: List[Values]):
        """Sets the values of this InlineResponse2001Timeseries.

        An array of objects with the parameter names and the measurement values.  # noqa: E501

        :param values: The values of this InlineResponse2001Timeseries.
        :type values: List[Values]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values
