# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.model_ import Model
from swagger_server.models.dwd_response_timeseries import ResponseTimeseries  # noqa: F401,E501
from swagger_server import util


class Response(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, station_id: str=None, resolution: str=None, observation_type: str=None, timeseries: List[ResponseTimeseries]=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger

        :param station_id: The station_id of this InlineResponse2001.  # noqa: E501
        :type station_id: str
        :param resolution: The resolution of this InlineResponse2001.  # noqa: E501
        :type resolution: str
        :param observation_type: The observation_type of this InlineResponse2001.  # noqa: E501
        :type observation_type: str
        :param timeseries: The timeseries of this InlineResponse2001.  # noqa: E501
        :type timeseries: List[ResponseTimeseries]
        """
        self.swagger_types = {
            'station_id': str,
            'resolution': str,
            'observation_type': str,
            'timeseries': List[ResponseTimeseries]
        }

        self.attribute_map = {
            'station_id': 'stationId',
            'resolution': 'resolution',
            'observation_type': 'observation_type',
            'timeseries': 'timeseries'
        }

        self._station_id = station_id
        self._resolution = resolution
        self._observation_type = observation_type
        self._timeseries = timeseries

    @classmethod
    def from_dict(cls, dikt) -> 'dwd_Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_1 of this InlineResponse2001.  # noqa: E501
        :rtype: Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def station_id(self) -> str:
        """Gets the station_id of this InlineResponse2001.

        The given station id  # noqa: E501

        :return: The station_id of this InlineResponse2001.
        :rtype: str
        """
        return self._station_id

    @station_id.setter
    def station_id(self, station_id: str):
        """Sets the station_id of this InlineResponse2001.

        The given station id  # noqa: E501

        :param station_id: The station_id of this InlineResponse2001.
        :type station_id: str
        """

        self._station_id = station_id

    @property
    def resolution(self) -> str:
        """Gets the resolution of this InlineResponse2001.

        The given resolution  # noqa: E501

        :return: The resolution of this InlineResponse2001.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution: str):
        """Sets the resolution of this InlineResponse2001.

        The given resolution  # noqa: E501

        :param resolution: The resolution of this InlineResponse2001.
        :type resolution: str
        """
        allowed_values = ["10_minutes", "1_minute", "daily", "hourly", "monthly"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def observation_type(self) -> str:
        """Gets the observation_type of this InlineResponse2001.

        The given observation type  # noqa: E501

        :return: The observation_type of this InlineResponse2001.
        :rtype: str
        """
        return self._observation_type

    @observation_type.setter
    def observation_type(self, observation_type: str):
        """Sets the observation_type of this InlineResponse2001.

        The given observation type  # noqa: E501

        :param observation_type: The observation_type of this InlineResponse2001.
        :type observation_type: str
        """
        allowed_values = ["air_temperature", "cloudiness", "cloud_type", "extreme_temperature", "extreme_wind", "kl", "more_precip", "precipitation", "pressure", "soil_temperature", "solar", "sun", "visibility", "water_equiv", "wind"]  # noqa: E501
        if observation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `observation_type` ({0}), must be one of {1}"
                .format(observation_type, allowed_values)
            )

        self._observation_type = observation_type

    @property
    def timeseries(self) -> List[ResponseTimeseries]:
        """Gets the timeseries of this InlineResponse2001.

        An array of objects with timestamp, measurement values and metadata.  # noqa: E501

        :return: The timeseries of this InlineResponse2001.
        :rtype: List[InlineResponse2001Timeseries]
        """
        return self._timeseries

    @timeseries.setter
    def timeseries(self, timeseries: List[ResponseTimeseries]):
        """Sets the timeseries of this InlineResponse2001.

        An array of objects with timestamp, measurement values and metadata.  # noqa: E501

        :param timeseries: The timeseries of this InlineResponse2001.
        :type timeseries: List[InlineResponse2001Timeseries]
        """
        if timeseries is None:
            raise ValueError("Invalid value for `timeseries`, must not be `None`")  # noqa: E501

        self._timeseries = timeseries
